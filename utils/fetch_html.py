from playwright.async_api import async_playwright

async def fetch_html(session, url, semaphore):
    try:
        async with semaphore:
            async with session.get(url, timeout=10) as response:
                if response.status == 200 and 'text/html' in response.headers.get('Content-Type', ''):
                    return await response.text()
    except Exception as e:
        print(f"Error fetching {url}: {e}")
    return None

# async def fetch_html(session, url, semaphore):
#     # """This approch takes into account the links that are generated by lazy loading also."""
#     try:
#         async with semaphore:
#             async with async_playwright() as p:
#                 browser = await p.chromium.launch(headless=True)
#                 context = await browser.new_context(
#                     user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
#                     viewport={"width": 1280, "height": 800},
#                     java_script_enabled=True
#                 )
#                 page = await context.new_page()

#                 await page.goto(url, timeout=20000, wait_until='networkidle')

#                 # Scroll to bottom multiple times to trigger lazy load if needed
#                 for _ in range(5):
#                     await page.mouse.wheel(0, 1000)
#                     await page.wait_for_timeout(1000)

#                 content = await page.content()
#                 await browser.close()
#                 return content

#     except Exception as e:
#         print(f"[Playwright Error] {url}: {e}")
#     return None